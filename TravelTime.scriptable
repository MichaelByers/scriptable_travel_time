{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "purple",
    "glyph" : "shuttle-van"
  },
  "name" : "TravelTime",
  "script" : "const w = new ListWidget();\nw.backgroundColor = new Color(\"#f7f7f7\");\nconst myGradient = new LinearGradient();\nmyGradient.colors = [new Color(\"#0000ff\"), new Color(\"#f7f7f7\")];\nmyGradient.locations = [0,0.35];\n\/\/myGradient.startPoint = new Point(0,1);\n\/\/myGradient.endPoint = new Point(1,0.3);\nw.backgroundGradient = myGradient;\n\nconst API_KEY = '447bcEjFw0CcuoDHzfzdDptFPZL9Asfl';\nlet config = [\n    {\n        lat:    39.754147366528095,\n        long:   -105.02083976022377,\n        img:    \"home.png\",\n        letter: 'H'\n    },\n    {\n        lat:    39.74490,\n        long:   -105.01198,\n        img:    \"office.png\",\n        letter: 'O'\n    },\n    {\n        lat:    39.92318307982724,\n        long:   -105.13227960070402,\n        img:    \"golf-flag.png\",\n        letter: 'G'\n    }\n];\n\n\/\/ get current location\nvar loc = await getCurrentLocation(config);\nvar stack = w.addStack();\nstack.centerAlignContent();\nconst title = stack.addText('Travel Time');\ntitle.textColor = Color.white();\ntitle.font = Font.boldSystemFont(18);\nstack = w.addStack();\nconst spacer = stack.addText(' ');\n\nfor (let cfg of config) { \n    console.log(\"lat: \"+cfg.lat);\n    \/\/ get distance, ignore if close\n    var distanceFromLocation = haversine(\n        { latitude: loc.latitude, longitude: loc.longitude },\n        { latitude: cfg.lat, longitude: cfg.long }\n    );\n    console.log(\"Distance: \" + distanceFromLocation);\n    if(distanceFromLocation > 0.7) {\n        const tUrl = 'https:\/\/api.tomtom.com\/routing\/1\/calculateRoute\/'+loc.latitude+','+loc.longitude+':'+cfg.lat+','+cfg.long+'\/json?computeTravelTimeFor=all&sectionType=traffic&traffic=true&travelMode=car&key='+API_KEY;\n        console.log(\"Getting traffic time\");\n        var resp = await get({url: tUrl});\n        var travelTime = Math.round(resp.summary.travelTimeInSeconds\/60);\n        console.log(\"Time is: \" + travelTime);\n        stack = w.addStack();\n        stack.centerAlignContent();\n        var img = await getImage(cfg.img);\n        if(img) {\n            var imgw = stack.addImage(img);\n            imgw.imageSize = new Size(30,30);\n        } else {\n            const label = stack.addText(cfg.letter);\n            label.textColor = Color.black();\n            label.font = Font.boldSystemFont(18);\n        }\n        stack.addSpacer(10);\n        var timew = stack.addText(travelTime.toString()+ ' min');\n        timew.textColor = Color.black();\n        stack.addSpacer(5);\n    }\n}\n\n\/\/ display\nScript.setWidget(w);\nScript.complete();\nw.presentSmall();\n\nasync function get(opts){\n    try {\n        const request = new Request(opts.url);\n        request.headers = {\n            ...opts.headers,\n            ...this.defaultHeaders\n        }\n        var result = await request.loadJSON();\n        var route = result.routes[0];\n        return route;\n    } catch (error) {\n        console.log('Could not fetch traffic: ' + error);\n        return {summary: {travelTimeInSeconds: 0}};\n    }\n}\n\nasync function loadImage(imgUrl) {\n    try {\n        let req = new Request(imgUrl);\n        let image = await req.loadImage();\n        return image;\n    } catch (error) {\n        console.log('Could not fetch image: ' + error);\n        return null;\n    }    \n}\n\nasync function getImage(name) {\n  try {\n    let fm=FileManager.iCloud();\n    let dir = fm.documentsDirectory();\n    let path = fm.joinPath(dir, \"\/img\/\" + name); \n    return fm.readImage(path);\n  } catch (error) {\n        console.log('Could not fetch image: ' + error);\n        return null;\n  }\n}\n\nasync function getCurrentLocation(config) {\n    try {\n        const {latitude, longitude} = await Location.current();\n        console.log(latitude);\n        console.log(longitude);\n        return {latitude: latitude, longitude: longitude};\n    } catch(error) {\n        console.log('Could not fetch location: ' + error);\n        return {latitude: config[0].lat,\n        longitude: config[0].long};\n    }\n}\n\n\/**\n * Returns the haversine distance between start and end.\n *\n * @param {LatLon} start\n * @param {LatLon} end\n * @returns {number}\n *\/\n function haversine(start, end) {\n    const toRadians = (n) => (n * Math.PI) \/ 180;\n  \n    const deltaLat = toRadians(end.latitude - start.latitude);\n    const deltaLon = toRadians(end.longitude - start.longitude);\n    const startLat = toRadians(start.latitude);\n    const endLat = toRadians(end.latitude);\n  \n    const angle =\n      Math.sin(deltaLat \/ 2) ** 2 +\n      Math.sin(deltaLon \/ 2) ** 2 * Math.cos(startLat) * Math.cos(endLat);\n    \n    const c = 2 * Math.atan2(Math.sqrt(angle), Math.sqrt(1 - angle));\n    \/\/ distance in miles\n    const d = 3958.7603 * c;\n    return d;\n}",
  "share_sheet_inputs" : [

  ]
}